#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

// Structure to represent the stack
struct Stack {
    int top;
    char arr[MAX_SIZE];
};

// Function to initialize the stack
void initialize(struct Stack *stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack *stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
int isFull(struct Stack *stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an element into the stack
void push(struct Stack *stack, char ch) {
    if (isFull(stack)) {
        printf("Stack Overflow\n");
        return;
    }
    stack->arr[++(stack->top)] = ch;
}

// Function to pop an element from the stack
char pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow\n");
        return '\0';
    }
    return stack->arr[(stack->top)--];
}

// Function to get the top element of the stack
char peek(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        return '\0';
    }
    return stack->arr[stack->top];
}

// Function to check if a character is an operator
int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
}

// Function to get the precedence of an operator
int getPrecedence(char ch) {
    if (ch == '+' || ch == '-')
        return 1;
    else if (ch == '*' || ch == '/')
        return 2;
    else
        return 0;
}

// Function to convert infix expression to postfix expression
void infixToPostfix(char *infix, char *postfix) {
    struct Stack stack;
    initialize(&stack);
    int i, j = 0;
    for (i = 0; infix[i] != '\0'; i++) {
        if (infix[i] == ' ' || infix[i] == '\t')
            continue;
        else if (isOperator(infix[i])) {
            while (!isEmpty(&stack) && getPrecedence(peek(&stack)) >= getPrecedence(infix[i])) {
                postfix[j++] = pop(&stack);
            }
            push(&stack, infix[i]);
        } else if (infix[i] == '(') {
            push(&stack, infix[i]);
        } else if (infix[i] == ')') {
            while (!isEmpty(&stack) && peek(&stack) != '(') {
                postfix[j++] = pop(&stack);
            }
            if (isEmpty(&stack) || peek(&stack) != '(') {
                printf("Invalid infix expression\n");
                return;
            } else {
                pop(&stack); // Pop the '(' from stack
            }
        } else {
            postfix[j++] = infix[i];
        }
    }
    while (!isEmpty(&stack)) {
        if (peek(&stack) == '(') {
            printf("Invalid infix expression\n");
            return;
        }
        postfix[j++] = pop(&stack);
    }
    postfix[j] = '\0';
}

// Function to print the postfix expression
void printPostfix(char *postfix) {
    printf("Postfix expression: %s\n", postfix);
}

int main() {
    char infix[MAX_SIZE];
    char postfix[MAX_SIZE];

    printf("Enter the infix expression: ");
    fgets(infix, sizeof(infix), stdin);
    infix[strlen(infix) - 1] = '\0'; // Remove the newline character from fgets

    infixToPostfix(infix, postfix);
    printPostfix(postfix);

    return 0;
}
